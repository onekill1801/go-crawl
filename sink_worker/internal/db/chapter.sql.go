// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chapter.sql

package db

import (
	"context"
	"database/sql"
)

const createChapter = `-- name: CreateChapter :exec
INSERT INTO chapter (story_id, title, content, order_stt, image_url)
VALUES (?, ?, ?, ?, ?)
`

type CreateChapterParams struct {
	StoryID  string
	Title    string
	Content  sql.NullString
	OrderStt sql.NullInt32
	ImageUrl sql.NullString
}

func (q *Queries) CreateChapter(ctx context.Context, arg CreateChapterParams) error {
	_, err := q.db.ExecContext(ctx, createChapter,
		arg.StoryID,
		arg.Title,
		arg.Content,
		arg.OrderStt,
		arg.ImageUrl,
	)
	return err
}

const deleteChapter = `-- name: DeleteChapter :exec
DELETE FROM chapter WHERE id = ?
`

func (q *Queries) DeleteChapter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChapter, id)
	return err
}

const getChapter = `-- name: GetChapter :one
SELECT id, story_id, title, content, created_at, order_stt, image_url FROM chapter WHERE id = ? LIMIT 1
`

func (q *Queries) GetChapter(ctx context.Context, id int64) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, getChapter, id)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.StoryID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.OrderStt,
		&i.ImageUrl,
	)
	return i, err
}

const listChaptersByStory = `-- name: ListChaptersByStory :many
SELECT id, story_id, title, content, created_at, order_stt, image_url FROM chapter
WHERE story_id = ?
ORDER BY order_stt ASC, created_at ASC
LIMIT ? OFFSET ?
`

type ListChaptersByStoryParams struct {
	StoryID string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListChaptersByStory(ctx context.Context, arg ListChaptersByStoryParams) ([]Chapter, error) {
	rows, err := q.db.QueryContext(ctx, listChaptersByStory, arg.StoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chapter
	for rows.Next() {
		var i Chapter
		if err := rows.Scan(
			&i.ID,
			&i.StoryID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.OrderStt,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChapter = `-- name: UpdateChapter :exec
UPDATE chapter
SET title = ?, content = ?, order_stt = ?, image_url = ?
WHERE id = ?
`

type UpdateChapterParams struct {
	Title    string
	Content  sql.NullString
	OrderStt sql.NullInt32
	ImageUrl sql.NullString
	ID       int64
}

func (q *Queries) UpdateChapter(ctx context.Context, arg UpdateChapterParams) error {
	_, err := q.db.ExecContext(ctx, updateChapter,
		arg.Title,
		arg.Content,
		arg.OrderStt,
		arg.ImageUrl,
		arg.ID,
	)
	return err
}
