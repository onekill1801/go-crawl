// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: story.sql

package db

import (
	"context"
	"database/sql"
)

const createStory = `-- name: CreateStory :exec
INSERT INTO stories (id, title, author, cover_url, domain_link, image_url)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateStoryParams struct {
	ID         string
	Title      string
	Author     string
	CoverUrl   sql.NullString
	DomainLink sql.NullString
	ImageUrl   sql.NullString
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) error {
	_, err := q.db.ExecContext(ctx, createStory,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.CoverUrl,
		arg.DomainLink,
		arg.ImageUrl,
	)
	return err
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM stories WHERE id = ?
`

func (q *Queries) DeleteStory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteStory, id)
	return err
}

const getStory = `-- name: GetStory :one
SELECT id, title, author, cover_url, created_at, domain_link, image_url FROM stories WHERE id = ? LIMIT 1
`

func (q *Queries) GetStory(ctx context.Context, id string) (Story, error) {
	row := q.db.QueryRowContext(ctx, getStory, id)
	var i Story
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.CoverUrl,
		&i.CreatedAt,
		&i.DomainLink,
		&i.ImageUrl,
	)
	return i, err
}

const listStories = `-- name: ListStories :many
SELECT id, title, author, cover_url, created_at, domain_link, image_url FROM stories ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type ListStoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListStories(ctx context.Context, arg ListStoriesParams) ([]Story, error) {
	rows, err := q.db.QueryContext(ctx, listStories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Story
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CoverUrl,
			&i.CreatedAt,
			&i.DomainLink,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStory = `-- name: UpdateStory :exec
UPDATE stories
SET title = ?, author = ?, cover_url = ?, domain_link = ?, image_url = ?
WHERE id = ?
`

type UpdateStoryParams struct {
	Title      string
	Author     string
	CoverUrl   sql.NullString
	DomainLink sql.NullString
	ImageUrl   sql.NullString
	ID         string
}

func (q *Queries) UpdateStory(ctx context.Context, arg UpdateStoryParams) error {
	_, err := q.db.ExecContext(ctx, updateStory,
		arg.Title,
		arg.Author,
		arg.CoverUrl,
		arg.DomainLink,
		arg.ImageUrl,
		arg.ID,
	)
	return err
}
