// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: images.sql

package db

import (
	"context"
	"database/sql"
)

const createImage = `-- name: CreateImage :exec
INSERT INTO images (chapter_id, url, referer, title, order_stt)
VALUES (?, ?, ?, ?, ?)
`

type CreateImageParams struct {
	ChapterID int64
	Url       string
	Referer   sql.NullString
	Title     sql.NullString
	OrderStt  sql.NullInt32
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.ExecContext(ctx, createImage,
		arg.ChapterID,
		arg.Url,
		arg.Referer,
		arg.Title,
		arg.OrderStt,
	)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE id = ?
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, chapter_id, url, created_at, referer, title, order_stt FROM images WHERE id = ? LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ChapterID,
		&i.Url,
		&i.CreatedAt,
		&i.Referer,
		&i.Title,
		&i.OrderStt,
	)
	return i, err
}

const listImagesByChapter = `-- name: ListImagesByChapter :many
SELECT id, chapter_id, url, created_at, referer, title, order_stt FROM images
WHERE chapter_id = ?
ORDER BY order_stt ASC, created_at ASC
LIMIT ? OFFSET ?
`

type ListImagesByChapterParams struct {
	ChapterID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListImagesByChapter(ctx context.Context, arg ListImagesByChapterParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImagesByChapter, arg.ChapterID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ChapterID,
			&i.Url,
			&i.CreatedAt,
			&i.Referer,
			&i.Title,
			&i.OrderStt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :exec
UPDATE images
SET url = ?, referer = ?, title = ?, order_stt = ?
WHERE id = ?
`

type UpdateImageParams struct {
	Url      string
	Referer  sql.NullString
	Title    sql.NullString
	OrderStt sql.NullInt32
	ID       int64
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.ExecContext(ctx, updateImage,
		arg.Url,
		arg.Referer,
		arg.Title,
		arg.OrderStt,
		arg.ID,
	)
	return err
}
